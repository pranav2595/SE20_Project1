{"ast":null,"code":"import _defineProperty from \"D:\\\\sem 3\\\\SE\\\\SE20_Project1\\\\social_media_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"D:\\\\sem 3\\\\SE\\\\SE20_Project1\\\\social_media_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\sem 3\\\\SE\\\\SE20_Project1\\\\social_media_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\sem 3\\\\SE\\\\SE20_Project1\\\\social_media_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\sem 3\\\\SE\\\\SE20_Project1\\\\social_media_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\sem 3\\\\SE\\\\SE20_Project1\\\\social_media_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _objectSpread from \"D:\\\\sem 3\\\\SE\\\\SE20_Project1\\\\social_media_client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"D:\\\\sem 3\\\\SE\\\\SE20_Project1\\\\social_media_client\\\\src\\\\components\\\\scream\\\\PostScream.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport MyButton from '../../util/MyButton'; // MUI Stuff\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport AddIcon from '@material-ui/icons/Add';\nimport CloseIcon from '@material-ui/icons/Close'; // Redux stuff\n\nimport { connect } from 'react-redux';\nimport { postScream, clearErrors } from '../../redux/actions/dataActions';\n\nvar styles = function styles(theme) {\n  return _objectSpread({}, theme, {\n    submitButton: {\n      position: 'relative',\n      float: 'right',\n      marginTop: 10\n    },\n    progressSpinner: {\n      position: 'absolute'\n    },\n    closeButton: {\n      position: 'absolute',\n      left: '91%',\n      top: '6%'\n    }\n  });\n};\n\nvar PostScream =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PostScream, _Component);\n\n  function PostScream() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PostScream);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PostScream)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      open: false,\n      body: '',\n      errors: {}\n    };\n\n    _this.handleOpen = function () {\n      _this.setState({\n        open: true\n      });\n    };\n\n    _this.handleClose = function () {\n      var clearErrors = _this.props.clearErrors;\n      clearErrors();\n\n      _this.setState({\n        open: false,\n        errors: {}\n      });\n    };\n\n    _this.handleChange = function (event) {\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    _this.handleSubmit = function (event) {\n      event.preventDefault();\n\n      _this.props.postScream({\n        body: _this.state.body\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(PostScream, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.UI.errors) {\n        this.setState({\n          errors: nextProps.UI.errors\n        });\n      }\n\n      if (!nextProps.UI.errors && !nextProps.UI.loading) {\n        this.setState({\n          body: '',\n          open: false,\n          errors: {}\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var errors = this.state.errors;\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          loading = _this$props.UI.loading;\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(MyButton, {\n        onClick: this.handleOpen,\n        tip: \"Post a Scream!\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(AddIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      })), React.createElement(Dialog, {\n        open: this.state.open,\n        onClose: this.handleClose,\n        fullWidth: true,\n        maxWidth: \"sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(MyButton, {\n        tip: \"Close\",\n        onClick: this.handleClose,\n        tipClassName: classes.closeButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(CloseIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      })), React.createElement(DialogTitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Post a new scream\"), React.createElement(DialogContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        name: \"body\",\n        type: \"text\",\n        label: \"SCREAM!!\",\n        multiline: true,\n        rows: \"3\",\n        placeholder: \"Scream at your fellow apes\",\n        error: errors.body ? true : false,\n        helperText: errors.body,\n        className: classes.textField,\n        onChange: this.handleChange,\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        color: \"primary\",\n        className: classes.submitButton,\n        disabled: loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Submit\", loading && React.createElement(CircularProgress, {\n        size: 30,\n        className: classes.progressSpinner,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }))))));\n    }\n  }]);\n\n  return PostScream;\n}(Component);\n\nPostScream.propTypes = {\n  postScream: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    UI: state.UI\n  };\n};\n\nexport default connect(mapStateToProps, {\n  postScream: postScream,\n  clearErrors: clearErrors\n})(withStyles(styles)(PostScream));","map":{"version":3,"sources":["D:\\sem 3\\SE\\SE20_Project1\\social_media_client\\src\\components\\scream\\PostScream.js"],"names":["React","Component","Fragment","PropTypes","withStyles","MyButton","Button","TextField","Dialog","DialogContent","DialogTitle","CircularProgress","AddIcon","CloseIcon","connect","postScream","clearErrors","styles","theme","submitButton","position","float","marginTop","progressSpinner","closeButton","left","top","PostScream","state","open","body","errors","handleOpen","setState","handleClose","props","handleChange","event","target","name","value","handleSubmit","preventDefault","nextProps","UI","loading","classes","textField","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport MyButton from '../../util/MyButton';\r\n// MUI Stuff\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n// Redux stuff\r\nimport { connect } from 'react-redux';\r\nimport { postScream, clearErrors } from '../../redux/actions/dataActions';\r\n\r\nconst styles = (theme) => ({\r\n  ...theme,\r\n  submitButton: {\r\n    position: 'relative',\r\n    float: 'right',\r\n    marginTop: 10\r\n  },\r\n  progressSpinner: {\r\n    position: 'absolute'\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    left: '91%',\r\n    top: '6%'\r\n  }\r\n});\r\n\r\nclass PostScream extends Component {\r\n  state = {\r\n    open: false,\r\n    body: '',\r\n    errors: {}\r\n  };\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.UI.errors) {\r\n      this.setState({\r\n        errors: nextProps.UI.errors\r\n      });\r\n    }\r\n    if (!nextProps.UI.errors && !nextProps.UI.loading) {\r\n      this.setState({ body: '', open: false, errors: {} });\r\n    }\r\n  }\r\n  handleOpen = () => {\r\n    this.setState({ open: true });\r\n  };\r\n  handleClose = () => {\r\n    const { clearErrors } = this.props;\r\n    clearErrors();\r\n    this.setState({ open: false, errors: {} });\r\n  };\r\n  handleChange = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.postScream({ body: this.state.body });\r\n  };\r\n  render() {\r\n    const { errors } = this.state;\r\n    const {\r\n      classes,\r\n      UI: { loading }\r\n    } = this.props;\r\n    return (\r\n      <Fragment>\r\n        <MyButton onClick={this.handleOpen} tip=\"Post a Scream!\">\r\n          <AddIcon />\r\n        </MyButton>\r\n        <Dialog\r\n          open={this.state.open}\r\n          onClose={this.handleClose}\r\n          fullWidth\r\n          maxWidth=\"sm\"\r\n        >\r\n          <MyButton\r\n            tip=\"Close\"\r\n            onClick={this.handleClose}\r\n            tipClassName={classes.closeButton}\r\n          >\r\n            <CloseIcon />\r\n          </MyButton>\r\n          <DialogTitle>Post a new scream</DialogTitle>\r\n          <DialogContent>\r\n            <form onSubmit={this.handleSubmit}>\r\n              <TextField\r\n                name=\"body\"\r\n                type=\"text\"\r\n                label=\"SCREAM!!\"\r\n                multiline\r\n                rows=\"3\"\r\n                placeholder=\"Scream at your fellow apes\"\r\n                error={errors.body ? true : false}\r\n                helperText={errors.body}\r\n                className={classes.textField}\r\n                onChange={this.handleChange}\r\n                fullWidth\r\n              />\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submitButton}\r\n                disabled={loading}\r\n              >\r\n                Submit\r\n                {loading && (\r\n                  <CircularProgress\r\n                    size={30}\r\n                    className={classes.progressSpinner}\r\n                  />\r\n                )}\r\n              </Button>\r\n            </form>\r\n          </DialogContent>\r\n        </Dialog>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nPostScream.propTypes = {\r\n  postScream: PropTypes.func.isRequired,\r\n  clearErrors: PropTypes.func.isRequired,\r\n  UI: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  UI: state.UI\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { postScream, clearErrors }\r\n)(withStyles(styles)(PostScream));\r\n"]},"metadata":{},"sourceType":"module"}